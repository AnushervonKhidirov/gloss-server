generator client {
  provider      = "prisma-client"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  password   String
  firstName  String     @map("first_name") @db.VarChar(40)
  lastName   String?    @map("last_name") @db.VarChar(40)
  archived   Boolean    @default(false)
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime   @updatedAt @map("updated_at") @db.Timestamp(0)
  role       Role       @default(WORKER)
  categories Category[]
  queue      Queue[]

  @@map("user")
}

model Client {
  id        Int      @id @default(autoincrement())
  phone     String   @db.VarChar(40)
  name      String?  @db.VarChar(40)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  queue     Queue[]

  @@map("client")
}

model Service {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(40)
  price      Int
  desc       String?
  duration   Int
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  queue      Queue[]

  @@map("services")
}

model Category {
  id        Int       @id @default(autoincrement())
  value     String    @unique @db.VarChar(40)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  user      User[]
  services  Service[]

  @@map("categories")
}

model Queue {
  id        Int      @id @default(autoincrement())
  date      DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  client    Client   @relation(fields: [clientId], references: [id])
  clientId  Int      @map("client_id")
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId Int      @map("service_id")

  @@map("queue")
}

model BlackList {
  id    Int    @id @default(autoincrement())
  phone String @db.VarChar(40)

  @@map("black_list")
}

enum Role {
  WORKER
  ADMIN
}
